var log4js = require("log4js");
let level = process.env.NODE_ENV == 'production'
  ? "error"
  : "all"
console.log("=====>3process.out_file")
console.log(process.env.out_file)
console.log(process.env.NODE_ENV)

log4js.configure({
  appenders: {
    infoLogs: {
      type: 'file',
      filename: `${process.out_file || '../logs/stdout.log'}`,
      maxLogSize: (104800 * 1024),
      backups: 100
    },
    traceLogs: {
      type: 'dateFile',
      filename: `${process.trace_file || '../logs/stdtrace.log'}`,
      maxLogSize: (104800 * 1024),
      backups: 100
    },
    errorLogs: {
      type: 'file',
      filename: `${process.error_file || '../logs/stderr.log'}`,
      maxLogSize: (104800 * 1024),
      backups: 100
    },
    console: {
      type: 'console'
    }
  },
  categories: {
    log_info: {
      appenders: [
        'infoLogs', 'console'
      ],
      level: `${level}`
    },
    log_error: {
      appenders: [
        'errorLogs', 'console'
      ],
      level: `${level}`
    },
    log_trace: {
      appenders: [
        'traceLogs', 'console'
      ],
      level: `${level}`
    },
    default: {
      appenders: ['console'],
      level: 'ALL'
    }
  },
  pm2: true
})

var infoLogger = log4js.getLogger('log_info')
var errorLogger = log4js.getLogger('log_error')
var traceLogger = log4js.getLogger('log_trace')

console.log = infoLogger.info.bind(infoLogger);
console.error = errorLogger.error.bind(errorLogger);

const error = (message) => {
  errorLogger.error(message)
}

const trace = (message) => {
  traceLogger.trace(message)
}

const debug = (message) => {
  infoLogger.debug(message)
}

const info = (message) => {
  infoLogger.info(message)
}

const warn = (message) => {
  infoLogger.warn(message)
}

const mark = (message) => {
  infoLogger.mark(message)
}

//以下操作由上到下，日志重要级别逐层提升
module.exports = {
  ///建议记录业务追踪记录
  trace,
  ///debug信息
  debug,
  ///普通信息
  info,
  ///警告信息
  warn,
  ///错误信息
  error,
  ///标记重要的里程碑，如数据库，服务启动开始，成功等
  mark
}
